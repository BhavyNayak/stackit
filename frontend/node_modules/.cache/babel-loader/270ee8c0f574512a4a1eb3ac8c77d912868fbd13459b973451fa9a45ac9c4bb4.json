{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.api = axios.create({\n      baseURL: '/api',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor to handle errors\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Auth endpoints\n  async login(credentials) {\n    const response = await this.api.post('/users/login', credentials);\n    return response.data;\n  }\n  async register(credentials) {\n    const response = await this.api.post('/users/register', credentials);\n    return response.data;\n  }\n  async getCurrentUser() {\n    const response = await this.api.get('/users/me');\n    return response.data;\n  }\n\n  // Question endpoints\n  async getQuestions(filters) {\n    const params = new URLSearchParams();\n    if (filters !== null && filters !== void 0 && filters.query) params.append('query', filters.query);\n    if (filters !== null && filters !== void 0 && filters.tags) filters.tags.forEach(tag => params.append('tags', tag));\n    if (filters !== null && filters !== void 0 && filters.sort) params.append('sort', filters.sort);\n    if (filters !== null && filters !== void 0 && filters.page) params.append('page', filters.page.toString());\n    if (filters !== null && filters !== void 0 && filters.limit) params.append('limit', filters.limit.toString());\n    const response = await this.api.get(`/questions?${params.toString()}`);\n    return response.data;\n  }\n  async getQuestion(id) {\n    const response = await this.api.get(`/questions/${id}`);\n    return response.data;\n  }\n  async createQuestion(data) {\n    const response = await this.api.post('/questions', data);\n    return response.data;\n  }\n  async updateQuestion(id, data) {\n    const response = await this.api.put(`/questions/${id}`, data);\n    return response.data;\n  }\n  async deleteQuestion(id) {\n    const response = await this.api.delete(`/questions/${id}`);\n    return response.data;\n  }\n\n  // Answer endpoints\n  async getAnswers(questionId) {\n    const response = await this.api.get(`/questions/${questionId}/answers`);\n    return response.data;\n  }\n  async createAnswer(questionId, data) {\n    const response = await this.api.post(`/questions/${questionId}/answers`, data);\n    return response.data;\n  }\n  async updateAnswer(id, data) {\n    const response = await this.api.put(`/answers/${id}`, data);\n    return response.data;\n  }\n  async deleteAnswer(id) {\n    const response = await this.api.delete(`/answers/${id}`);\n    return response.data;\n  }\n  async acceptAnswer(id) {\n    const response = await this.api.patch(`/answers/${id}/accept`);\n    return response.data;\n  }\n\n  // Voting endpoints\n  async voteQuestion(id, voteData) {\n    const response = await this.api.post(`/questions/${id}/vote`, voteData);\n    return response.data;\n  }\n  async voteAnswer(id, voteData) {\n    const response = await this.api.post(`/answers/${id}/vote`, voteData);\n    return response.data;\n  }\n\n  // Notification endpoints\n  async getNotifications() {\n    const response = await this.api.get('/users/notifications');\n    return response.data;\n  }\n  async markNotificationAsRead(id) {\n    const response = await this.api.patch(`/users/notifications/${id}/read`);\n    return response.data;\n  }\n  async markAllNotificationsAsRead() {\n    const response = await this.api.patch('/users/notifications/read-all');\n    return response.data;\n  }\n\n  // Tags endpoints\n  async getPopularTags() {\n    const response = await this.api.get('/questions/tags/popular');\n    return response.data;\n  }\n\n  // Search endpoints\n  async searchQuestions(query) {\n    const response = await this.api.get(`/questions/search?q=${encodeURIComponent(query)}`);\n    return response.data;\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["axios","ApiService","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","credentials","post","data","register","getCurrentUser","get","getQuestions","filters","params","URLSearchParams","query","append","tags","forEach","tag","sort","page","toString","limit","getQuestion","id","createQuestion","updateQuestion","put","deleteQuestion","delete","getAnswers","questionId","createAnswer","updateAnswer","deleteAnswer","acceptAnswer","patch","voteQuestion","voteData","voteAnswer","getNotifications","markNotificationAsRead","markAllNotificationsAsRead","getPopularTags","searchQuestions","encodeURIComponent","apiService"],"sources":["C:/Users/Satyadevsinh/Desktop/StackIT/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { \r\n  User, \r\n  Question, \r\n  Answer, \r\n  Notification, \r\n  ApiResponse,\r\n  LoginCredentials,\r\n  RegisterCredentials,\r\n  CreateQuestionData,\r\n  CreateAnswerData,\r\n  VoteData,\r\n  SearchFilters\r\n} from '../types';\r\n\r\nclass ApiService {\r\n  private api: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.api = axios.create({\r\n      baseURL: '/api',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Request interceptor to add auth token\r\n    this.api.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Response interceptor to handle errors\r\n    this.api.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Auth endpoints\r\n  async login(credentials: LoginCredentials): Promise<ApiResponse<{ user: User; token: string }>> {\r\n    const response: AxiosResponse<ApiResponse<{ user: User; token: string }>> = await this.api.post('/users/login', credentials);\r\n    return response.data;\r\n  }\r\n\r\n  async register(credentials: RegisterCredentials): Promise<ApiResponse<{ user: User; token: string }>> {\r\n    const response: AxiosResponse<ApiResponse<{ user: User; token: string }>> = await this.api.post('/users/register', credentials);\r\n    return response.data;\r\n  }\r\n\r\n  async getCurrentUser(): Promise<ApiResponse<User>> {\r\n    const response: AxiosResponse<ApiResponse<User>> = await this.api.get('/users/me');\r\n    return response.data;\r\n  }\r\n\r\n  // Question endpoints\r\n  async getQuestions(filters?: SearchFilters): Promise<ApiResponse<Question[]>> {\r\n    const params = new URLSearchParams();\r\n    if (filters?.query) params.append('query', filters.query);\r\n    if (filters?.tags) filters.tags.forEach(tag => params.append('tags', tag));\r\n    if (filters?.sort) params.append('sort', filters.sort);\r\n    if (filters?.page) params.append('page', filters.page.toString());\r\n    if (filters?.limit) params.append('limit', filters.limit.toString());\r\n\r\n    const response: AxiosResponse<ApiResponse<Question[]>> = await this.api.get(`/questions?${params.toString()}`);\r\n    return response.data;\r\n  }\r\n\r\n  async getQuestion(id: string): Promise<ApiResponse<Question>> {\r\n    const response: AxiosResponse<ApiResponse<Question>> = await this.api.get(`/questions/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  async createQuestion(data: CreateQuestionData): Promise<ApiResponse<Question>> {\r\n    const response: AxiosResponse<ApiResponse<Question>> = await this.api.post('/questions', data);\r\n    return response.data;\r\n  }\r\n\r\n  async updateQuestion(id: string, data: Partial<CreateQuestionData>): Promise<ApiResponse<Question>> {\r\n    const response: AxiosResponse<ApiResponse<Question>> = await this.api.put(`/questions/${id}`, data);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteQuestion(id: string): Promise<ApiResponse<null>> {\r\n    const response: AxiosResponse<ApiResponse<null>> = await this.api.delete(`/questions/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Answer endpoints\r\n  async getAnswers(questionId: string): Promise<ApiResponse<Answer[]>> {\r\n    const response: AxiosResponse<ApiResponse<Answer[]>> = await this.api.get(`/questions/${questionId}/answers`);\r\n    return response.data;\r\n  }\r\n\r\n  async createAnswer(questionId: string, data: CreateAnswerData): Promise<ApiResponse<Answer>> {\r\n    const response: AxiosResponse<ApiResponse<Answer>> = await this.api.post(`/questions/${questionId}/answers`, data);\r\n    return response.data;\r\n  }\r\n\r\n  async updateAnswer(id: string, data: Partial<CreateAnswerData>): Promise<ApiResponse<Answer>> {\r\n    const response: AxiosResponse<ApiResponse<Answer>> = await this.api.put(`/answers/${id}`, data);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteAnswer(id: string): Promise<ApiResponse<null>> {\r\n    const response: AxiosResponse<ApiResponse<null>> = await this.api.delete(`/answers/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  async acceptAnswer(id: string): Promise<ApiResponse<Answer>> {\r\n    const response: AxiosResponse<ApiResponse<Answer>> = await this.api.patch(`/answers/${id}/accept`);\r\n    return response.data;\r\n  }\r\n\r\n  // Voting endpoints\r\n  async voteQuestion(id: string, voteData: VoteData): Promise<ApiResponse<Question>> {\r\n    const response: AxiosResponse<ApiResponse<Question>> = await this.api.post(`/questions/${id}/vote`, voteData);\r\n    return response.data;\r\n  }\r\n\r\n  async voteAnswer(id: string, voteData: VoteData): Promise<ApiResponse<Answer>> {\r\n    const response: AxiosResponse<ApiResponse<Answer>> = await this.api.post(`/answers/${id}/vote`, voteData);\r\n    return response.data;\r\n  }\r\n\r\n  // Notification endpoints\r\n  async getNotifications(): Promise<ApiResponse<Notification[]>> {\r\n    const response: AxiosResponse<ApiResponse<Notification[]>> = await this.api.get('/users/notifications');\r\n    return response.data;\r\n  }\r\n\r\n  async markNotificationAsRead(id: string): Promise<ApiResponse<Notification>> {\r\n    const response: AxiosResponse<ApiResponse<Notification>> = await this.api.patch(`/users/notifications/${id}/read`);\r\n    return response.data;\r\n  }\r\n\r\n  async markAllNotificationsAsRead(): Promise<ApiResponse<null>> {\r\n    const response: AxiosResponse<ApiResponse<null>> = await this.api.patch('/users/notifications/read-all');\r\n    return response.data;\r\n  }\r\n\r\n  // Tags endpoints\r\n  async getPopularTags(): Promise<ApiResponse<string[]>> {\r\n    const response: AxiosResponse<ApiResponse<string[]>> = await this.api.get('/questions/tags/popular');\r\n    return response.data;\r\n  }\r\n\r\n  // Search endpoints\r\n  async searchQuestions(query: string): Promise<ApiResponse<Question[]>> {\r\n    const response: AxiosResponse<ApiResponse<Question[]>> = await this.api.get(`/questions/search?q=${encodeURIComponent(query)}`);\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport const apiService = new ApiService();\r\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}